<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="onCreationComplete()" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- <fx:Script source="/Jway/MainLoader.as"/>  -->
	<fx:Style>

	</fx:Style>
	<fx:Script>
		<![CDATA[
//import flash.display.Loader;
import flash.events.*;
import flash.net.*;
import flash.external.*;
import flash.display.*
import flash.utils.ByteArray;
import mx.core.FlexGlobals;

private const ImageLoadFailSecurity: Number = 0;
private const ImageLoadFail: Number = 1;
private const BytesLoadFail: Number = 2;

private var loader: URLLoader = null;
private var bytesLoader: Loader = null;
private var index: Number = 0;
private var src: String = "";
private var altSrc: String = "";
private var emptySrc: String = "";
private var tryAlt: Boolean = false;
private var debug: Boolean = false;

private function onCreationComplete(): void{
	try{
		this.index = parseInt(FlexGlobals.topLevelApplication.parameters.index);
		this.debug = FlexGlobals.topLevelApplication.parameters.debug == "true";
		
		if (this.debug != true){
			txtErr.visible = false;
		}
	}
	catch (error: Error){
		msg(error);
	}
	
	//txt.text = "1!";
	
	
	
	//txt.text += " 2";
	
	loader = new URLLoader();
	bytesLoader = new Loader();
	//var loader: Loader = new Loader();
	
	//txt.text += " 3";
	
	loader.dataFormat = URLLoaderDataFormat.BINARY;
	loader.addEventListener(Event.COMPLETE, onImageLoadSuccess);
	loader.addEventListener(IOErrorEvent.IO_ERROR, onImageLoadFail);
	loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onImageLoadFailSecurity);
	
	//txt.text += " 4";
	
	bytesLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onBytesLoadSuccess);
	bytesLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onBytesLoadFail);
	bytesLoader.contentLoaderInfo.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onBytesLoadFail);
	
	//txt.text += " 5";
	
	//loader.load(req);
	//loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoadSuccess);
	//loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onImageLoadFail);
	
	//this.txt.text = sUrl;
	try{
		//ExternalInterface.addCallback("getText", _getText);
		//ExternalInterface.addCallback("setText", _setText);
		//ExternalInterface.addCallback("getWidth", _getWidth);
		//ExternalInterface.addCallback("setWidth", _getWidth);
		//ExternalInterface.addCallback("getHeight", _getHeight);
		//ExternalInterface.addCallback("setHeight", _setHeight);
		ExternalInterface.addCallback("getSrc", _getSrc);
		ExternalInterface.addCallback("setSrc", _setSrc);
		ExternalInterface.addCallback("getAltSrc", _getAltSrc);
		ExternalInterface.addCallback("setAltSrc", _setAltSrc);
		ExternalInterface.addCallback("getEmptySrc", _getEmptySrc);
		ExternalInterface.addCallback("setEmptySrc", _setEmptySrc);
		ExternalInterface.addCallback("empty", _empty);
		ExternalInterface.addCallback("showError", _showError);
		ExternalInterface.call("__onImageComponentLoaded" + this.index, null);
	}
	catch (error: Error){
		txtErr.visible = true;
		msg("Error: can not access to ExternalInterface.");
	}
	
	//this.img.
	
	//txt.text += " [end]!";
	
	//onImgClick();
}

private function loadAltImg(): void{
	if (this.tryAlt){
		
		return;
	}
	
	if (this.altSrc){
		this.tryAlt = true;
		this.loadImage(this.altSrc);
	}
}

private function onImageLoadSuccess(event: Event): void{
	//txt.text += " img load succ.";
	
	var loader: URLLoader = this.loader;
	var aData: ByteArray = loader.data as ByteArray;
	var aTarget: ByteArray = new ByteArray();
	
	aTarget.writeBytes(aData, 0, aData.length);
	
	aTarget = decImg(aTarget);
	
	bytesLoader.loadBytes( aTarget );
	
	//loader.data;
	//txt.text = loader.bytesTotal.toString() + " bytes";
	//txt.text = event.toString();
}

private function onImageLoadFail(event: IOErrorEvent): void{
	fireFailEvent("ImageLoadFail", event);
}

private function onImageLoadFailSecurity(event: SecurityErrorEvent): void{
	fireFailEvent("ImageLoadFailSecurity", event);
}

private function onBytesLoadSuccess(event: Event): void{
	//txt.text += bytesLoader.content.width + " px";
	//bytesLoader.content.
	img.source = Bitmap(bytesLoader.content);
	
	try{
		var obj: Object = new Object();
		
		obj.height = img.source.bitmapData.height;
		obj.width = img.source.bitmapData.width;
		ExternalInterface.call("__onImageComplete" + this.index, obj);
	}
	catch (error: Error){
		txtErr.visible = true;
		this.msg(error);
	}
}
private function onBytesLoadFail(event: Event): void{
	fireFailEvent("BytesLoadFail", event);
}
private function onImgResize(): void{
	//txtErr.text = "w=" + img.width + ", h=" + img.height;
}
private function onImgClick(): void{
	//loadImage("http://contents1.newkey.co.kr/loader.php?p=/comic/lucky/gohangsuk/gohangsuk_8/13/" + leadingZero(index++) + ".jpg.nkc");
}
private function onImgComplete(): void{
	
}

private function fireFailEvent(name: String, event: Event): void{
	var errorCode: Number;
	
	if (name == "ImageLoadFailSecurity"){
		errorCode = 0;
	}
	else if (name == "ImageLoadFail"){
		errorCode = 1;
	}
	else if (name == "BytesLoadFail"){
		errorCode = 2;
	}
	
	msg(name);
	msg(event);
	
	try{
		ExternalInterface.call("__onImageComponentFail" + this.index, errorCode);
	}
	catch (error: Error){
		txtErr.visible = true;
		msg(error);
	}
	
	loadAltImg();
}
private function msg(error: *): void{
	if (error is Error){
		txtErr.text += error.message + "\n";
	}
	else{
		txtErr.text += error.toString() + "\n";
	}
}

/*
public function _setWdith(width: String): void{
	img.width = width;
}
public function _getWidth(): String{
	return img.width;
}
public function _setHeight(height: String): void{
	img.height = height;
}
public function _getHeight(): String{
	return img.height;
}
*/
public function _setSrc(src: String): void{
	//msg(src);
	this.src = src;
	this.tryAlt = false;
	loadImage(src);
}
public function _getSrc(): String{
	return this.src;
}
public function _setAltSrc(alt: String): void{
	this.altSrc = alt;
}
public function _getAltSrc(): String{
	return this.altSrc;
}
public function _setEmptySrc(src: String): void{
	this.emptySrc = src;
}
public function _getEmptySrc(): String{
	return this.emptySrc;
}
public function _empty(): void{
	if (this.emptySrc){
		this.tryAlt = true;
		loadImage(this.emptySrc);
	}
}
public function _showError(show: Boolean): void{
	txtErr.visible = show;
}
public function loadImage(url: String): void{
	var sUrl: String = url;// "http://211.43.189.155:8070/test/newkey/test/loader.php?p=/comic/lucky/gohangsuk/gohangsuk_8/13/100.jpg.nkc";
	var req: URLRequest = new URLRequest( sUrl );
	
	try{
		loader.load(req);
	}
	catch (error: Error){
		msg(error);
	}
	
}
/*
public function _setText(text: String): void{
	txt.text = text;
}
public function _getText(): String{
	return txt.text;
}
public function onImgClick(): void{
	loadImage("http://contents1.newkey.co.kr/loader.php?p=/comic/lucky/gohangsuk/gohangsuk_8/13/" + leadingZero(index++) + ".jpg.nkc");
}



private function leadingZero(num: Number): String{
	if (num < 10){
		return "00" + num;
	}
	if (num < 100){
		return "0" + num;
	}
	
	return num + "";
}
*/
		]]>
	</fx:Script>
	<s:layout>
        <!--<s:VerticalLayout />-->
		<s:BasicLayout />
    </s:layout>
	<!--<mx:TextInput id="txt"/>-->
	
	
	<!--<mx:Image id="img" click="onImgClick()" width="100%" scaleContent="true" />-->
	<s:Image id="img" scaleMode="zoom" smooth="true" width="100%" height="100%" resize="onImgResize()" click="onImgClick()" />	
	<mx:TextArea id="txtErr" height="300" />
</s:Application>